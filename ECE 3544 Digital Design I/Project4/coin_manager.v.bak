module coin_manager(clock, enable, reset, in, quarter_digits, dime_digits, nickel_digits);
	input enable, reset;
	input [1:0] in;
	output [7:0] quarter_digits, dime_digits, nickel_digits;
	reg [7:0] quarters, dimes, nickels;
	
	reg [2:0] state, next_state;
	parameter [1:0] NO_COIN = 3'd0, NICKEL = 3'd1, DIME = 3'd2, QUARTER = 3'd3, INIT = 3'd4;
	
	always @ (posedge clock or negedge reset)
	begin
		if (reset == 1'b0)
			state <= INIT;
		else 
			state <= next_state;
	end
	
	always @ (posedge clock)
	begin
		if (enable) begin
			next_state = INIT;
			case(state)
				INIT:	begin 
							quarters = 8'd0;
							dimes = 8'd0;
							nickels = 8'd0;
						end
				NO_COIN:begin
							quarters = quarters;
							dimes = dimes;
							nickels = nickels;
						end
				NICKEL:	begin
							nickels = nickels + 3'b101;
							dimes = dimes + 1'b0;
							quarters = quarters + 1'b0;
						end
				DIME:	begin
							nickels = nickels + 1'b0;
							dimes = dimes + 4'b1010;
							quarters = quarters + 1'b0;
						end
				QUARTER:begin
							nickels = nickels + 1'b0;
							dimes = dimes + 1'b0;
							quarters = quarters + 5'b11001;
						end
			endcase
		end
		else 
			begin
				quarters = quarters;
				dimes = dimes;
				nickels = nickels;
			end
	end
	
	always @ (state or enable or in)
	begin
		if (in == 2'b00)
			next_state = NO_COIN;
		else if (in == 2'b01)
			next_state = NICKEL;
		else if (in == 2'b10)
			next_state = DIME;
		else if (in == 2'b11)
			next_state = QUARTER;
		else 
			next_state = INIT;
	end
	
	assign quarter_digits = quarters;
	assign dime_digits = dimes;
	assign nickel_digits = nickels;

endmodule